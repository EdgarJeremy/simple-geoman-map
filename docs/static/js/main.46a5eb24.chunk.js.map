{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","districts","subdistricts","neighbors","s_d","s_s","_this2","this","geoman","GeoMan","container","center","zoom","Styles","LIGHT","getDistricts","then","setState","d","_this3","getSubdistricts","s","_this4","getNeighbors","_this5","_this$state","react_default","a","createElement","className","id","map","i","key","onClick","focus","name","href","fetchSubdistrict","concat","j","fetchNeighbors","n","k","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46a5eb24.chunk.js","sourcesContent":["import React from 'react';\nimport GeoMan from 'geoman-client';\n\nclass App extends React.Component {\n  state = {\n    districts: [],\n    subdistricts: [],\n    neighbors: [],\n    s_d: null,\n    s_s: null\n  }\n  componentDidMount() {\n    this.geoman = new GeoMan('http://36.67.90.80', 8080, {\n      container: 'map',\n      center: [124.842624, 1.4794296],\n      zoom: 14,\n    }, GeoMan.Styles.LIGHT);\n    this.geoman.getDistricts().then((districts) => this.setState({ districts }));\n  }\n  fetchSubdistrict(d) {\n    this.setState({ subdistricts: [] }, () => {\n      d.getSubdistricts().then((subdistricts) => this.setState({ subdistricts }));\n    });\n  }\n  fetchNeighbors(s) {\n    this.setState({ neighbors: [] }, () => {\n      s.getNeighbors().then((neighbors) => this.setState({ neighbors }));\n    });\n  }\n  render() {\n    const { districts, subdistricts, neighbors } = this.state;\n    return (\n      <div className=\"App\">\n        <div id=\"map\"></div>\n        <div className=\"control\">\n          <div className=\"control-d\">\n            <ul>\n              {districts.map((d, i) => (\n                <li key={i}>\n                  <span onClick={() => d.focus()}>{d.name}</span> [<a href=\"#\" onClick={() => {\n                    const { s_d } = this.state;\n                    if (s_d === d.id) {\n                      this.setState({ s_d: null });\n                    } else {\n                      this.setState({\n                        s_d: d.id,\n                      }, () => this.fetchSubdistrict(d));\n                    }\n                  }}><i className={`fa fa-angle-${this.state.s_d === d.id ? 'up' : 'down'}`}></i></a>]\n                  <ul>\n                    {this.state.s_d === d.id && subdistricts.map((s, j) => (\n                      <li key={j}>\n                        <span onClick={() => s.focus()}>{s.name}</span> [<a href=\"#\" onClick={() => {\n                          const { s_s } = this.state;\n                          if (s_s === s.id) {\n                            this.setState({ s_s: null });\n                          } else {\n                            this.setState({\n                              s_s: s.id,\n                            }, () => this.fetchNeighbors(s));\n                          }\n                        }}><i className={`fa fa-angle-${this.state.s_s === s.id ? 'up' : 'down'}`}></i></a>]\n                        <ul>\n                          {this.state.s_s === s.id && neighbors.map((n, k) => (\n                            <li key={k}><span onClick={() => n.focus()}>{n.name}</span></li>\n                          ))}\n                        </ul>\n                      </li>\n                    ))}\n                  </ul>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}